// use std::collections::HashMap;

/// –¢—Ä–∏ —Ä—è–¥–∞ –ø–æ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏. –ï—Å—Ç—å –ø–∏–∫—Å–µ–ª—å / –Ω–µ—Ç –ø–∏–∫—Å–µ–ª—è
#[derive(Debug)]
pub struct AsciiMatrix(bool, bool, bool, bool, bool, bool);

impl AsciiMatrix {
    /// –Ω–∞ –≤—Ö–æ–¥–µ - —á–∏—Å–ª–æ –¥–æ 64. –ï—Å–ª–∏ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ - –æ—Ç—Ä–µ–∂–µ—Ç—Å—è
    pub fn from_num(num: u8) -> Self {
        // if num >= 64 {
        //     panic!("received num: {}", num);
        // }

        let digits: [u8; 6] = [
            num & 0b1,
            (num & 0b10) >> 1,
            (num & 0b100) >> 2,
            (num & 0b1000) >> 3,
            (num & 0b10000) >> 4,
            (num >> 5) & 0b1,
        ];

        // —Ä–∞–∑–¥–µ–ª—è—é —á–∏—Å–ª–æ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º.
        Self(
            num_to_bool(digits[0]),
            num_to_bool(digits[1]),
            num_to_bool(digits[2]),
            num_to_bool(digits[3]),
            num_to_bool(digits[4]),
            num_to_bool(digits[5]),
        )
    }

    // fn to_ascii(&self) -> char {}
}

pub fn num_to_char(num: u8) -> char {
    if num == 0 {
        // –ü—É—Å—Ç–æ—Ç–∞
        ' '
    } else if num % 64 == 63 {
        // –ü–æ–ª–Ω–æ—Ç–∞
        '\u{1fb8b}'
    } else {
        // –ù–µ—á—Ç–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ
        // —Ä–∞–∑–ª–æ–∂–∏–º –Ω–∞—à–µ —á–∏—Å–ª–æ –Ω–∞ –±–∏—Ç—ã (6 –±–∏—Ç–æ–≤) - x x x x x x
        // —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç–æ –≤ —Å–∏–º–≤–æ–ª, –Ω–∞–¥–æ –ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ

        // —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä—è–¥–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        let digits: [u8; 6] = [
            (num >> 5) & 0b1,
            (num & 0b10000) >> 4,
            (num & 0b1000) >> 3,
            (num & 0b100) >> 2,
            (num & 0b10) >> 1,
            num & 0b1,
        ];

        const CODE_START: u32 = 0x1fb00;

        let code_shift = digits.iter().fold(0, |acc, digit| (acc << 1) | digit);

        // println!("shift from {} to {}", num, code_shift);

        char::from_u32(CODE_START + code_shift as u32 - 1).unwrap()

        // let code_shift =
        // ' '
        // CODE_START as char
    }
}

fn num_to_bool(num: u8) -> bool {
    num > 0
}

// /// –ú–∞–ø–ø–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã
// pub struct AsciiMapper {
//     precomputed: HashMap<AsciiMatrix, char>
// }

// impl AsciiMapper {
//     pub fn new() -> Self {
//         // –≤—ã—á–∏—Å–ª—è—é –≤—Å—ë –∑–∞—Ä–∞–Ω–µ–µ
//         // –±–ª–∞–≥–æ, –≤—Å–µ —ç—Ç–∏ —Å–∏–º–≤–æ–ª—ã —É–ª–æ–∂–µ–Ω—ã –≤ —Å—Ç—Ä–æ–≥–æ–π –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤ —é–Ω–∏–∫–æ–¥–µ

//         // –≤—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ
//     }

//     /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –∫ –æ–¥–Ω–æ–º—É –∏–∑ BoxDrawingCharacters
//     ///
//     /// # Examples
//     ///
//     /// ```
//     /// let mapper = AsciiMapper::new();
//     /// let matrix = AsciiMatrix(true, true, false, false, false, false);
//     /// assert_eq!(mapper.to_ascii(&matrix), 'ü¨Ç')
//     /// ```
//     pub fn to_ascii(&self, matrix: &AsciiMatrix) -> char {}
// }
